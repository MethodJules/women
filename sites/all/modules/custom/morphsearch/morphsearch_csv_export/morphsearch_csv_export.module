<?php
/**
 * @file
 * Create a link to export Apache Solr search results as a CSV file. Add an export link to the search results page.
 */

/**
 * Implements hook_menu(). (EDITED)
 *
 * @return array of menu items
 */
function morphsearch_csv_export_menu() {
  $items = array();
  $items['admin/config/search/morphsearch_csv_export'] = array(
    'title' => 'Morphsearch CSV export settings',
    'description' => 'Set the path to access your Apache Sol server from anywhere.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('morphsearch_csv_export_admin'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_menu().
 * Build an admin settings menu for the morphsearch_csv_export module.
 * TODO check for valid_url(), validate?!
 *
 * @return array An array of menu items.
 */
function morphsearch_csv_export_admin() {
  $form = array();

  $env_id = variable_get('apachesolr_default_environment');
  $solrUrlLocal = apachesolr_get_solr($env_id)->getUrl(); // local only, e.g. http://localhost:8983/solr/drupal/

  $form['morphsearch_csv_export_solr_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr server URL for network access'),
    '#default_value' => variable_get('morphsearch_csv_export_solr_path'),
    '#size' => 100,
    '#maxlength' => 300,
    '#description' => t('Specify the Solr Server URL anyone can access from an outside network including your Solr core
     used for csv export (include http:// and trailing /, example: http://mysite/solr/mySolrCore/). Default value for local development: @solrurl.
     Live test server environment: http://147.172.96.42/solr/drupal/',
      array('@solrurl' => $solrUrlLocal)),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_apachesolr_search_page_alter().
 * Adds a link to the search results page to export the search results as a csv file for logged in users.
 *
 * @param array $build Holds html markup of the
 * @param array $search_page
 */
function morphsearch_csv_export_apachesolr_search_page_alter(array &$build, array $search_page) {
  $env_id = $search_page['env_id'];
  if (apachesolr_has_searched($env_id) && user_is_logged_in()) {
    // get the Solr query and extract the portion the user entered through the search block
    $solrQuery  = apachesolr_current_query($env_id);

    if ($solrQuery) {
      $response = apachesolr_static_response_cache($solrQuery->getSearcher());
    }

    //$solrUrl = 'http://147.172.96.42/solr/drupal/'; // live server environment
    //$solrUrl = apachesolr_get_solr($env_id)->getUrl(); // local only, e.g. http://localhost:8983/solr/drupal/
    $solrUrl = variable_get('morphsearch_csv_export_solr_path');

    if (isset($solrQuery)) {
      $solrParams = $solrQuery->getParams();
      $userFulltextSearch = drupal_encode_path($solrParams['q']);

      // build solr csv download link
      $downloadLink = $solrUrl . 'select?q=(' . $userFulltextSearch . ')' .
        '&rows=9999' .      // maximum number of search results to return
        '&qf=content&qf=label&qf=tags_inline&qf=taxonomy_names&qf=tos_content_extra&qf=tos_name&qf=ts_comments' .   // fields to search in
        '&fl=Typ:bundle_name,Titel:+label,Autoren:+tm_author,Jahr:+is_year,Beschreibung:+description' .             // fields to return with alias
        ',Anfangsdatum:+dm_field_projektzeitraum,Enddatum:+dm_field_projektzeitraum_end,Link:+url,Schlagworte:+taxonomy_names' .
        '&wt=csv';          // return format csv
    }

    // Build a new header for the search results page that contains the CSV export link.
    if (isset($build['search_results']['search_title'])) {
      $title = $build['search_results']['search_title']['#markup'];
      $export_tooltip = t("Export search results");
      $search_results_header = '<div class="search_results_header">' . $title .
        '<a id="exportcsv" href="' . $downloadLink . '" download="searchresults.csv">' .                // download file on click
        '<i title="' . $export_tooltip . '" class="fa fa-file-text-o fa-2x" aria-hidden="true"></i>' .  // download icon (CSS)
        '</a></div>';
      $build['search_results']['search_title']['#markup'] = $search_results_header;
    }
  }
}

/**
 * Implements hook_apachesolr_index_document_build().
 * Consolidate the necessary fields for the csv export, description [ID 37].
 *
 * @param ApacheSolrDocument $document Array of key / value pairs that represent a Solr Document as it will be sent to the Solr Server.
 * @param Object $entity Drupal representation of the node and it#s content.
 */
function morphsearch_csv_export_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity) {

  // Set the body field as the default csv export "description" field for all content types.
  if (isset($entity->body) && !empty($entity->body)) {
    $document->setField('description', $entity->body['und']['0']['value']);
  }

  // Set content type specific fields used as description.
  if ($entity->type === 'biblio') {
    $document->setField('description', $entity->biblio_abst_e);
  } else if ($entity->type === 'projekt') {
    $document->setField('description', $entity->field_kurzbeschreibung['und']['0']['value']);
  } else if ($entity->type === 'wissenskarte') {
    $document->setField('description', $entity->field_beschreibung['und']['0']['value']);
  }
}

/**
 * Implements hook_help().
 * Display help link to README.txt in module overview (admin/modules).
 */
function morphsearch_csv_export_help($path, $arg) {
  switch ($path) {
    case 'admin/help#morphsearch_csv_export':
      $readme = file_get_contents(drupal_get_path('module', 'morphsearch_csv_export') . '/README.txt');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $readme)) : '<pre>' . check_plain($readme) . '</pre>';
  }
}